#include <iostream>

using namespace std;
/*
객체 : 모든 사물으 의미한다. C++에서 객체를 의미하는 것은 각 변수들도 객체로 취급할 수도 있다
하지만 객체지향프로그래밍을 지원하기 위해 제공되는 수단은 class이다.
class는 객체가 아니다 class는 객체를 만들기 위한 틀이다

객체지향프로그래밍(OOP) : 객체들의 관계를 설정해주어서 부품을 조립하듯이 객체들을
조립하여 완성된 프로그램을 만들어나가는 방식이다

클래스 선언방법 : calss 클래스명 {}; 의 형태로 선언한다
코드블럭안에 멤버변수를 넣어줄 수 있다. 단 함수도 멤버로 만들수 있다

클래스의 4가지 속성
캡슐화, 은닉화, 상속성, 다형성

캡슐화 : 클래스 안에 속하는 여러 변수 혹은 함수를 하나의 클래스로 묶어주는 기능
은닉화 : 클래스 안에 속하는 변수  혹은 함수를 내가 원하는 부분만 외부에 공개하고 외부에 공개하지 않을수 있다
 - public : 클래스 내부, 외부 모두 접근 가능하다
 - protected : 클래스 외부에서는 접근이 불가능하고 자기자신 내부나 자식 클래스 내부에서는 접근이 가능한방법
 - private : 자기자신 내부에서만 접근이 가능하고 외부나 자식 내부에서는 접근이 불가능한 방법이다
 상속성 : 클래스는 클래스와 클래스간에 부모, 자식 관계를 형성할수 있다
 자식클래스는 부모클래스의 멤버를 물려받아 자신의 것처럼 사용할 수 있다
 단  private로 되어있는 멤버에는 접근이 불가능하다
 다형성 : 부모 자식관계로 상속관계가 형성되어있는 클래스간에 서로 형변환이 가능한 성질을 말한다

 생성자, 소멸자
 객체 생성, 소며리 자동으로 호출
 직접 만들지 않으면 기본 생성자, 기본 소멸자가 만들어짐

 멤버함수
 해당 클래스가 사용하는 전용 함수
 해당 클래스의 객체가 필요함
 멤버함수를 객체를 통해서 호출하면, 해당 객체의 주소가 this 포인터로 전달된다
 
 */

class cMy {
	// 접근 제한 지정자
	// private, protected(상속), public

private:
	int m_i;

public:

	void SetInt(int i)
	{
		m_i = i;
	}

public:
	// 생성자
	cMy()
	{
		m_i = 100;
	}
	// 소멸자
	
	~cMy()
	{
		m_i = 100;
	}
};



int main()
{
	cMy c;
	c.SetInt(10);

	return 0;
}