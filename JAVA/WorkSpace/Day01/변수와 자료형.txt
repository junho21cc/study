상수
 - 리터널상수 , 심볼릭상수

리터널 상수
 - 데이터 그 자체
 - 자동으로 공간이 생성되고 메모리에 저장된다.
 - 공간을 구분할 수 있는 방법이 없기때문에 공간을 다시 이용할 수 없다.
 - 단발성 데이터

 데이터를 다루는 공간들 ( 변수 , 배열 , 객체 .. )
 - 데이터를 저장하는 공간
 - 용도에 맞는 공간을 만들고 데이터를 저장시켜야한다.
 - 공간을 구분할 수 있는 이름이 있기때문에 공간을 다시 이용할 수 있다.
 - 지속성 데이터
===============================================================
변수
 - 데이터를 하나를 저장하는 공간
 - 용도에 맞는 공간을 만들고 데이터를 저장시켜야한다.
 - 공간을 구분할 수 있는 이름이 있기 때문에 공간을 다시 이용할 수 있다. ( 변수명 )
 - 지속성 데이터

 - 선언
  - 메모리에 변수공간을 할당받고 그 공간에 변수명을 붙이는 작업
  - 용도에 맞는 공간을 만들어주어야한다.. (자료형)
  - 형식
	자료형 변수명;
	- 변수명 : 할당받은 변수공간을 구분하는 이름
	 # 암묵적인 규칙
	  - 데이터의 성격이 연상되는 단어로 이름을 지어준다..
	  - 소문자를 권장한다..

#작명규칙
 - 영문자, 숫자 , _(언더바)로 구성된다..
 - 대소문자 구별 가능..
 - 숫자로 시작 x ***
 - 공백 x, 특수기호 x **
 - 예약어 x ( System.out.println() )

#자료형 ************
 - 데이터의 형태를 구분
 - 공간의 형식을 정의한 키워드..

 - 원시형(기본형) - 데이터를 저장하고 관리하는 용도의 공간
  - 정수형
	byte , short , int , long
  - 실수형
	float , double

  - 문자형 : 단일문자 ' '
	char
  - 논리형 : 참과 거짓을 저장하고 관리하는 자료형
	boolean

 - 참조형(객체형) - 실제 데이터 공간이 만들어지고 그 공간의 정보를 저장하는 공간이 함께 만들어지는 형태	
	           - 기능이 함께 딸려온다..
  - 기본형을 제외한 모든 자료형
  - 문자열 : String
  - 배열

 - 초기화
  - 할당받은 변수공간에 값을 처음 넣는 작업
  - 할당받은 공간은 항상 쓰레기값으로 채워져있다.. 내가 원하는 데이터로 값을 처음 넣는것이다..
  - 초기화를 진행하지 않으면 공간의 데이터를 사용하려할때 에러가 발생된다.

  - 형식
	1. 선언과 동시의 초기화
		자료형 변수명 = 값;
	2. 선언 후 초기화
		자료형 변수명;
		변수명 = 값;

 # = ( 대입연산자 ) - 우측 공간의 데이터를 좌측 공간에 대입하는 연산자

 - 호출
  - 할당받은 변수공간을 불러오는 작업
  - 호출하고자 하는 위치에 변수명을 적으면 된다.

  - 형식
	변수명
